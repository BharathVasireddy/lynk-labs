# LYNK LABS - CURSOR AI RULES
# Critical Instructions for Consistent Development

## üéØ CORE PRINCIPLES

### 1. NEVER REMOVE EXISTING FUNCTIONALITY
- NEVER delete or break existing working features
- Always extend, never replace unless explicitly requested
- If refactoring is needed, maintain backward compatibility
- Always preserve existing API endpoints and data structures

### 2. FOLLOW DOCUMENTATION STRICTLY
- ALWAYS reference PROJECT_STRUCTURE.md before creating new files
- ALWAYS follow DESIGN_SYSTEM.md for UI components
- ALWAYS check API_DOCUMENTATION.md for endpoint consistency
- ALWAYS follow DEVELOPMENT_GUIDE.md task sequence

### 3. ERROR HANDLING PROTOCOL
- When encountering errors, FIRST check this .cursorrules file
- If error is not documented here, solve it and ASK USER to add solution to .cursorrules
- NEVER ignore TypeScript errors - fix them immediately
- Always include try-catch blocks for async operations
- Always validate input data before processing

## üöÄ ENTERPRISE DEPLOYMENT PROTOCOL

### CRITICAL DEPLOYMENT RULES - PRODUCTION SAFETY

#### üî¥ MANDATORY PRE-DEPLOYMENT CHECKLIST
Before ANY code changes that will go to production:

1. **LOCAL TESTING REQUIREMENTS**
   ```bash
   # MANDATORY: Run these commands in sequence
   npm run dev          # Test in development mode
   npm run build        # Verify build succeeds with NO errors
   npm run start        # Test production build locally
   curl http://localhost:3000  # Verify production server responds
   ```

2. **CODE QUALITY GATES**
   - ‚úÖ ALL TypeScript errors MUST be resolved
   - ‚úÖ ALL console.error() statements MUST be removed or handled
   - ‚úÖ ALL TODO comments MUST be addressed or documented
   - ‚úÖ ALL new features MUST have error boundaries
   - ‚úÖ ALL API endpoints MUST have proper error handling

3. **DATABASE SAFETY CHECKS**
   ```bash
   # MANDATORY: Verify database operations
   npx prisma validate    # Validate schema
   npx prisma generate    # Generate client
   # Test database connections in local production build
   ```

4. **SECURITY VALIDATION**
   - ‚úÖ NO sensitive data in console.log statements
   - ‚úÖ NO hardcoded API keys or secrets
   - ‚úÖ ALL environment variables properly configured
   - ‚úÖ ALL user inputs properly validated and sanitized

#### üü° DEPLOYMENT SEQUENCE (STRICTLY ENFORCED)
```bash
# Step 1: Development Testing
npm run dev
# ‚úÖ Manually test ALL affected features
# ‚úÖ Test user flows end-to-end
# ‚úÖ Verify responsive design on mobile/desktop

# Step 2: Production Build Testing
npm run build
# ‚úÖ Build MUST complete with 0 errors
# ‚úÖ Warnings are acceptable, errors are NOT

# Step 3: Production Runtime Testing
npm run start
# ‚úÖ Server MUST start without errors
# ‚úÖ Test critical paths: auth, payments, orders
# ‚úÖ Verify database connections work

# Step 4: Git Deployment (ONLY after above steps pass)
git add .
git commit -m "type: descriptive message with testing confirmation"
git push origin main
```

#### üî¥ FORBIDDEN DEPLOYMENT PRACTICES
- ‚ùå NEVER push code that hasn't been tested locally in production mode
- ‚ùå NEVER push code with TypeScript errors
- ‚ùå NEVER push code with failing builds
- ‚ùå NEVER push code without testing critical user flows
- ‚ùå NEVER push database schema changes without migration testing
- ‚ùå NEVER push code with console.error() in production paths
- ‚ùå NEVER push code that breaks existing API contracts

#### üü¢ SAFE DEPLOYMENT PRACTICES
- ‚úÖ ALWAYS test the complete user journey locally
- ‚úÖ ALWAYS verify payment flows work in development
- ‚úÖ ALWAYS test authentication and authorization
- ‚úÖ ALWAYS verify database operations complete successfully
- ‚úÖ ALWAYS test error scenarios and edge cases
- ‚úÖ ALWAYS verify mobile responsiveness
- ‚úÖ ALWAYS check that existing features still work

#### üö® EMERGENCY ROLLBACK PROTOCOL
If production breaks after deployment:

1. **IMMEDIATE ACTIONS**
   ```bash
   # Get last working commit hash
   git log --oneline -10
   
   # Create emergency rollback
   git revert HEAD --no-edit
   git push origin main
   ```

2. **INCIDENT DOCUMENTATION**
   - Document what broke and why
   - Update .cursorrules with prevention measures
   - Add the failure scenario to testing checklist

#### üìä PRODUCTION MONITORING REQUIREMENTS
After each deployment:

1. **Immediate Verification (within 5 minutes)**
   - ‚úÖ Homepage loads correctly
   - ‚úÖ User authentication works
   - ‚úÖ Test booking flow works
   - ‚úÖ Payment processing works
   - ‚úÖ Database queries respond

2. **Extended Monitoring (within 30 minutes)**
   - ‚úÖ Check error logs for new issues
   - ‚úÖ Verify all API endpoints respond correctly
   - ‚úÖ Test mobile responsiveness
   - ‚úÖ Verify email notifications work

#### üîß FEATURE FLAG REQUIREMENTS
For major changes:

1. **Use Feature Flags for Risky Changes**
   ```typescript
   // Example: Gradual rollout pattern
   const isNewFeatureEnabled = process.env.ENABLE_NEW_FEATURE === 'true';
   
   if (isNewFeatureEnabled) {
     // New feature code
   } else {
     // Existing stable code
   }
   ```

2. **Database Migration Safety**
   ```bash
   # ALWAYS test migrations locally first
   npx prisma migrate dev
   # Verify data integrity after migration
   # Test rollback scenarios
   ```

#### üìù COMMIT MESSAGE STANDARDS
```bash
# Format: type: description [testing-status]
git commit -m "feat: add payment gateway integration [tested-locally-prod]"
git commit -m "fix: resolve order creation bug [verified-user-flow]"
git commit -m "refactor: optimize database queries [performance-tested]"

# Required testing confirmations:
# [tested-locally-prod] - Tested in local production build
# [verified-user-flow] - Complete user journey tested
# [performance-tested] - Performance impact verified
# [security-reviewed] - Security implications checked
```

#### üõ°Ô∏è BREAKING CHANGE PROTOCOL
For changes that might break existing functionality:

1. **MANDATORY IMPACT ASSESSMENT**
   - List all affected components/pages
   - Identify all affected user workflows
   - Document potential breaking changes
   - Create rollback plan before deployment

2. **STAGED DEPLOYMENT APPROACH**
   ```bash
   # Phase 1: Deploy with feature flag OFF
   git commit -m "feat: add new feature [feature-flag-disabled]"
   
   # Phase 2: Enable for testing (after production verification)
   git commit -m "config: enable new feature flag [gradual-rollout]"
   ```

#### üîç CODE REVIEW REQUIREMENTS
Before pushing to main:

1. **Self-Review Checklist**
   - ‚úÖ Code follows existing patterns
   - ‚úÖ No hardcoded values
   - ‚úÖ Proper error handling
   - ‚úÖ TypeScript types are correct
   - ‚úÖ No unused imports or variables
   - ‚úÖ Comments explain complex logic

2. **Testing Documentation**
   - Document what was tested
   - Include screenshots for UI changes
   - List edge cases covered
   - Confirm mobile testing completed

## üèó TECH STACK REQUIREMENTS

### Frontend (Next.js 14)
```typescript
// REQUIRED: App Router structure
src/app/
‚îú‚îÄ‚îÄ (auth)/           # Auth group routes
‚îú‚îÄ‚îÄ (dashboard)/      # Dashboard group routes  
‚îú‚îÄ‚îÄ api/              # API routes
‚îú‚îÄ‚îÄ globals.css       # Global styles
‚îî‚îÄ‚îÄ layout.tsx        # Root layout
```

### Database (Prisma + PostgreSQL)
```typescript
// REQUIRED: Always use Prisma for database operations
// NEVER write raw SQL queries
// Always use transactions for multi-table operations
const result = await prisma.$transaction([
  prisma.table1.create({...}),
  prisma.table2.update({...})
]);
```

### Authentication (NextAuth.js)
```typescript
// REQUIRED: Always check authentication status
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

export async function GET() {
  const session = await getServerSession(authOptions);
  if (!session) {
    return new Response("Unauthorized", { status: 401 });
  }
}
```

## üé® UI/UX REQUIREMENTS

### 1. Component Structure
```typescript
// REQUIRED: Component template
import { cn } from "@/lib/utils";

interface ComponentProps {
  className?: string;
  // ... other props
}

export function Component({ className, ...props }: ComponentProps) {
  return (
    <div className={cn("base-classes", className)} {...props}>
      {/* component content */}
    </div>
  );
}
```

### 2. Styling Rules
- ALWAYS use Tailwind CSS classes
- NEVER use inline styles or CSS modules
- Use shadcn/ui components as base
- Follow mobile-first responsive design
- Use semantic HTML elements

### 3. Form Handling
```typescript
// REQUIRED: Use React Hook Form + Zod
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

const schema = z.object({
  // schema definition
});

const form = useForm({
  resolver: zodResolver(schema),
});
```

## üîÑ URL-BASED ROUTING REQUIREMENTS

### 1. Page Structure
```typescript
// REQUIRED: Every page must be URL-based with proper metadata
export const metadata: Metadata = {
  title: "Page Title - Lynk Labs",
  description: "Page description"
};

export default function Page({ params, searchParams }: PageProps) {
  // page content
}
```

### 2. API Routes
```typescript
// REQUIRED: RESTful API structure
// GET /api/tests - List all tests
// GET /api/tests/[id] - Get specific test
// POST /api/tests - Create test
// PUT /api/tests/[id] - Update test
// DELETE /api/tests/[id] - Delete test

export async function GET(request: NextRequest) {
  try {
    // implementation
    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}
```

## üîê SECURITY REQUIREMENTS

### 1. Input Validation
```typescript
// REQUIRED: Always validate inputs
import { z } from "zod";

const inputSchema = z.object({
  email: z.string().email(),
  phone: z.string().regex(/^\+?[1-9]\d{1,14}$/),
});

const validatedData = inputSchema.parse(input);
```

### 2. Authentication Checks
```typescript
// REQUIRED: Protect all sensitive routes
import { verifyAuth } from "@/lib/auth-utils";

export async function POST(request: NextRequest) {
  const user = await verifyAuth(request);
  if (!user) {
    return new Response("Unauthorized", { status: 401 });
  }
}
```

## üìä DATABASE REQUIREMENTS

### 1. Schema Management
```prisma
// REQUIRED: Always include these fields in models
model BaseModel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}
```

### 2. Query Optimization
```typescript
// REQUIRED: Always include relevant relations
const order = await prisma.order.findUnique({
  where: { id },
  include: {
    user: true,
    orderItems: {
      include: {
        test: true
      }
    },
    homeVisit: true
  }
});
```

## üö® COMMON ERROR SOLUTIONS

### 1. TypeScript Errors
```typescript
// ERROR: Property 'x' does not exist on type 'y'
// SOLUTION: Define proper interfaces
interface UserProfile {
  id: string;
  name: string;
  email: string;
  // ... other properties
}
```

### 2. Prisma Errors
```typescript
// ERROR: Record not found
// SOLUTION: Always handle null cases
const user = await prisma.user.findUnique({ where: { id } });
if (!user) {
  return NextResponse.json(
    { error: "User not found" },
    { status: 404 }
  );
}
```

### 3. Authentication Errors
```typescript
// ERROR: Session not available
// SOLUTION: Always check session existence
const session = await getServerSession(authOptions);
if (!session?.user?.id) {
  redirect("/auth/signin");
}
```

## üìù DEVELOPMENT WORKFLOW

### 1. Before Creating New Features
1. Check PROJECT_STRUCTURE.md for file organization
2. Check API_DOCUMENTATION.md for endpoint patterns
3. Check DESIGN_SYSTEM.md for component usage
4. Create types in appropriate .d.ts files

### 2. Code Quality Checklist
- [ ] TypeScript errors resolved
- [ ] Proper error handling implemented
- [ ] Input validation added
- [ ] Authentication checks in place
- [ ] Database queries optimized
- [ ] UI components follow design system
- [ ] Mobile responsive design
- [ ] Accessibility attributes added

### 3. Testing Requirements
```typescript
// REQUIRED: Add tests for all new features
import { describe, it, expect } from '@jest/globals';

describe('Feature Name', () => {
  it('should work correctly', async () => {
    // test implementation
  });
});
```

## üîß PERFORMANCE REQUIREMENTS

### 1. Database Optimization
- Always use appropriate indexes
- Implement pagination for large datasets
- Use database-level filtering instead of JavaScript filtering

### 2. Frontend Optimization
- Use Next.js Image component for images
- Implement lazy loading for components
- Use React.memo for expensive components
- Implement proper caching strategies

## üìû EMERGENCY PROTOCOLS

### If Code Breaks:
1. Check console for specific error messages
2. Check this .cursorrules file for solutions
3. Revert to last working commit if needed
4. ASK USER to update .cursorrules with new solution

### If New Error Occurs:
1. Document the error and solution
2. Ask user to add to .cursorrules
3. Update API_DOCUMENTATION.md if API-related
4. Update DEVELOPMENT_GUIDE.md if process-related

## üöÄ DEPLOYMENT PROTOCOL

### CRITICAL RULE: NEVER PUSH DIRECTLY TO VERCEL
- ALWAYS use Git to push code
- ALWAYS ensure build runs successfully locally first
- ALWAYS test thoroughly in local environment before Git push
- Run `npm run build` and verify no errors before committing
- Test all functionality locally on `http://localhost:3000` (or available port)
- Only push to Git after confirming everything works locally

### Deployment Sequence:
1. `npm run dev` - Test in development
2. `npm run build` - Verify build succeeds
3. `npm run start` - Test production build locally
4. `git add .` - Stage changes
5. `git commit -m "descriptive message"` - Commit changes
6. `git push` - Push to repository (triggers Vercel deployment)

## ‚ö° QUICK REFERENCE

### File Creation Pattern:
```
components/ui/[component-name].tsx
components/forms/[form-name].tsx
src/app/[route]/page.tsx
src/app/api/[endpoint]/route.ts
lib/[utility-name].ts
types/[type-name].d.ts
```

### Import Order:
1. React/Next.js imports
2. Third-party library imports
3. Internal component imports
4. Utility imports
5. Type imports

### Commit Message Format:
```
feat: add new test booking feature [tested-locally-prod]
fix: resolve payment gateway integration [verified-user-flow]
docs: update API documentation [no-testing-required]
style: improve responsive design [mobile-tested]
refactor: optimize database queries [performance-verified]
```

## üéØ REMEMBER:
- CONSISTENCY IS KEY
- NEVER BREAK EXISTING FUNCTIONALITY
- ALWAYS FOLLOW THE DOCUMENTATION
- ASK FOR CLARIFICATION WHEN UNSURE
- UPDATE DOCUMENTATION WHEN ADDING NEW FEATURES
- PRODUCTION SAFETY IS PARAMOUNT - TEST EVERYTHING LOCALLY FIRST 